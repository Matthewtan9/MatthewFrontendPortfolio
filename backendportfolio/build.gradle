plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'matthew'
version = '0.0.1-SNAPSHOT'

ext {
	mapstructVersion = "1.5.3.Final"
	lombokVersion = "1.18.26"
	lombokMapstructBindingVersion = "0.2.0"
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation('io.github.cdimascio:dotenv-java:3.0.0')
	implementation('me.paulschwarz:spring-dotenv:4.0.0')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	testImplementation 'io.github.bonigarcia:webdrivermanager:5.6.2'
	testImplementation 'org.yaml:snakeyaml:2.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'mysql:mysql-connector-java:8.0.26'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
			"org.projectlombok:lombok:${lombokVersion}",
			"org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"


	implementation 'org.postgresql:postgresql:42.6.0'

//	runtimeOnly 'org.postgresql:postgresql'





}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.00
			}
		}
	}
}

jacocoTestReport {
	dependsOn test
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
